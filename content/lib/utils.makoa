<%!
    import markdown
    import os
    import json

    from mako.template import Template
    from mako.lookup import TemplateLookup
%>

<%def name="HIGHLIGHT_CSS()">
<%
    return "lib/code_highlight.css"
%>
</%def>

<%def name="mdown(text)">
<%
    """
    Convert mdown text to html.
    This is a filter.
    """
    return markdown.markdown(text,\
        extensions=['markdown.extensions.codehilite'])
%>
</%def>

<%def name="rel_file_link(file_path)">
<%
## Create a relative link to a file.
## file_path is the relative path of the file, with respect to the content
## directory.
    cur_path = os.path.join(my_output_dir,my_rel_dir)
    file_path = os.path.join(my_output_dir,file_path)
    href_addr = os.path.relpath(file_path,cur_path)
    return href_addr
%>
</%def>

<%def name="inspect_temp(file_path,key)">
<%
    """
    Inspect a template to get some metadata.
    Basically it runs self.${key}() at the template side and returns
    the result.
    """

    # Render the template with inspect=True to get the blog entry's
    # metadata.
    fl_tmp = Template(filename=file_path,lookup=context.lookup)
    res_inspect = fl_tmp.render(inspect=key)
    metadata = json.loads(res_inspect)

    return metadata
%>
</%def>


<%def name="get_extension(filename)">
<%
    """
    Get the extension of a file (What comes right after the last dot).
    """
    return filename.split(".")[-1]
%>
</%def>

<%def name="change_extension(filename,new_ext)">
<%
    """
    Change the extension of a file to be new_ext
    """
    last_dot = filename.rfind(".")
    return filename[:last_dot] + "." + new_ext

%>
</%def>

<%def name="inspect_directory(dir_name,props)">
<%
    MAKO_EXT = "mako"
    HTML_EXT = "html"

    res_entries = []

    dir_path = os.path.join(my_content_dir,my_rel_dir,dir_name)

    # Iterate over all files inside the blog:
    for root,dirs,files in os.walk(dir_path):
        for fl in files:
            if not get_extension(fl) == MAKO_EXT:
                # We only care about files with mako extension.
                continue

            # Path of file:
            fl_path = os.path.join(root,fl)
            # Absolute path:
            fl_abs = os.path.abspath(fl_path)
            # Get relative path of file inside the dir_name directory tree:
            fl_rel = os.path.relpath(fl_path,dir_path)

            # Add to list:
            entry = {}
            fl_rel_html = change_extension(fl_rel,HTML_EXT)
            entry["link_addr"] = os.path.join(dir_name,fl_rel_html)
            entry["props"] = {}
            for prop in props:
                entry["props"][prop] = inspect_temp(fl_path,prop)
            res_entries.append(entry)

    return res_entries
%>
</%def>

